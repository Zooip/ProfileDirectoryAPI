require 'rails_helper'
#include ActiveModelSerializers::Test::Serializer

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::ProfilesController, type: :controller do


  # This should return the minimal set of attributes required to create a valid
  # MasterData::Profile. As you add validations to MasterData::Profile, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:master_data_profile, first_name:"Jean")
  }

  let(:valid_json_attributes) {
    FactoryGirl.json_api_attributes_for(:master_data_profile, first_name:"Jean")
  }

  let(:invalid_json_attributes) {
    FactoryGirl.json_api_attributes_for(:invalid_master_data_profile)
  }

  include ControllerHelpers

  it_behaves_like 'a scopable Controller'

  describe "GET #index" do
    it_behaves_like 'a Oauth protected action', :get, :index, 'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite'
    context "as a valid scope", :valid_oauth do
      let (:scopes){'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite'}

      before :each do
        get :index, {format: :json,access_token: token.token}
      end

      it {is_expected.to respond_with(:success)}

      it "assigns all master_data_profiles as @master_data_profiles" do
        expect(assigns(:profiles)).to eq([resource_owner_profile])
      end
    end
  end

  describe "GET #show" do
    let(:profile) {FactoryGirl.create(:master_data_profile, id: 100)}

    it_behaves_like 'a Oauth protected action', :get, :show, 'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite' do
      let (:action_params) {{format: :json,:id => profile.id}}
    end

    context "as a valid scope", :valid_oauth do
      let (:scopes){'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite'}

      before :each do
        get :show, {format: :json,access_token: token.token,:id => profile.id}
      end

      it {is_expected.to respond_with(:success)}

      it "assigns the requested api_profile as @api_profile" do
        expect(assigns(:profile)).to eq(profile)
      end

    end
  end


  describe "POST #create" do

    it_behaves_like 'a Oauth protected action', :post, :create, 'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite' do
      let (:action_params) {{format: :json, :data => valid_json_attributes}}
    end

    context "as a valid scope", :valid_oauth do
      let (:scopes){'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite'}

      context "with valid params" do
        it "creates a new MasterData::Profile" do
          expect {
            post :create, {format: :json,access_token: token.token,:data => valid_json_attributes}
          }.to change(MasterData::Profile, :count).by(1)
        end

        it "assigns a newly created api_profile as @api_profile" do
          post :create, {format: :json,access_token: token.token,:data => valid_json_attributes}
          expect(assigns(:profile)).to be_a(MasterData::Profile)
          expect(assigns(:profile)).to be_persisted
        end

        it do
          post :create, {format: :json,access_token: token.token,:data => valid_json_attributes}
          is_expected.to respond_with(:created)
        end
      end

      context "with invalid params" do
        it do
          post :create, {format: :json,access_token: token.token,:data => invalid_json_attributes}
          is_expected.to respond_with(:unprocessable_entity)
        end

      end
    end
  end

  describe "PUT #update" do

    let(:profile) {MasterData::Profile.create! valid_attributes}
    let(:new_attributes) {FactoryGirl.json_api_attributes_for(:master_data_profile, first_name:"Jacques")}

    it_behaves_like 'a Oauth protected action', :put, :update, 'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite' do
      let (:action_params) {{format: :json,:id => profile.to_param, :data => new_attributes}}
    end

    context "as a valid scope", :valid_oauth do
      let (:scopes){'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite'}

      context "with valid params" do

        before :each do
          put :update, {format: :json,access_token: token.token,:id => profile.to_param, :data => new_attributes}
        end

        it "updates the requested api_profile" do
          profile.reload
          expect(profile.first_name).to eq('Jacques')
        end

        it "assigns the requested api_profile as @api_profile" do
          profile.reload
          expect(assigns(:profile)).to eq(profile)
        end

        it {is_expected.to respond_with(:ok)}
      end

      context "with invalid params" do
        it do
          put :update, {format: :json,access_token: token.token,:id => profile.to_param, :data => invalid_json_attributes}
          is_expected.to respond_with(:unprocessable_entity)
        end
      end
    end
  end

  describe "DELETE #destroy" do

    let!(:profile) {MasterData::Profile.create! valid_attributes}    

    it_behaves_like 'a Oauth protected action', :delete, :destroy, 'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite' do
      let (:action_params) {{format: :json,:id => profile.to_param}}
    end

    context "as a valid scope", :valid_oauth do
      let (:scopes){'scopes.profiles.basic.readwrite scopes.profiles.civility.readwrite'}

      it "destroys the requested api_profile" do
        expect {
          delete :destroy, {format: :json,access_token: token.token,:id => profile.to_param}
        }.to change(MasterData::Profile, :count).by(-1)
      end

      it do
        delete :destroy, {format: :json,access_token: token.token,:id => profile.to_param}
        is_expected.to respond_with(:no_content)
      end
    end
  end
end