require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::ProfilesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Gram::Profile. As you add validations to Gram::Profile, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:gram_profile, first_name:"Jean")
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:invalid_gram_profile)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Api::ProfilesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all gram_profiles as @gram_profiles" do
      profile = Gram::Profile.create! valid_attributes
      get :index, {format: :json,}, valid_session
      expect(assigns(:gram_profiles)).to eq([profile])
    end
  end

  describe "GET #show" do
    it "assigns the requested api_profile as @api_profile" do
      profile = Gram::Profile.create! valid_attributes
      get :show, {format: :json,:id => profile.id}, valid_session
      expect(assigns(:gram_profile)).to eq(profile)
    end
  end


  describe "POST #create" do
    context "with valid params" do
      it "creates a new Gram::Profile" do
        expect {
          post :create, {format: :json,:profile => valid_attributes}, valid_session
        }.to change(Gram::Profile, :count).by(1)
      end

      it "assigns a newly created api_profile as @api_profile" do
        post :create, {format: :json,:profile => valid_attributes}, valid_session
        expect(assigns(:gram_profile)).to be_a(Gram::Profile)
        expect(assigns(:gram_profile)).to be_persisted
      end

      it do
        post :create, {format: :json,:profile => valid_attributes}, valid_session
        is_expected.to respond_with(:created)
      end
    end

    context "with invalid params" do
      it do
        post :create, {format: :json,:profile => invalid_attributes}, valid_session
        is_expected.to respond_with(:unprocessable_entity)
      end

    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:gram_profile, first_name:"Jacques")
      }

      it "updates the requested api_profile" do
        profile = Gram::Profile.create! valid_attributes
        put :update, {format: :json,:id => profile.to_param, :profile => new_attributes}, valid_session
        profile.reload
        expect(profile.first_name).to eq('Jacques')
      end

      it "assigns the requested api_profile as @api_profile" do
        profile = Gram::Profile.create! valid_attributes
        put :update, {format: :json,:id => profile.to_param, :profile => valid_attributes}, valid_session
        expect(assigns(:gram_profile)).to eq(profile)
      end

      it do
        profile = Gram::Profile.create! valid_attributes
        put :update, {format: :json,:id => profile.to_param, :profile => valid_attributes}, valid_session
        is_expected.to respond_with(:ok)
      end
    end

    context "with invalid params" do
      it do
        profile = Gram::Profile.create! valid_attributes
        put :update, {format: :json,:id => profile.to_param, :profile => invalid_attributes}, valid_session
        is_expected.to respond_with(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested api_profile" do
      profile = Gram::Profile.create! valid_attributes
      expect {
        delete :destroy, {format: :json,:id => profile.to_param}, valid_session
      }.to change(Gram::Profile, :count).by(-1)
    end

    it do
      profile = Gram::Profile.create! valid_attributes
      delete :destroy, {format: :json,:id => profile.to_param}, valid_session
      is_expected.to respond_with(:no_content)
    end
  end

end
